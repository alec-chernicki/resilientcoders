.align-bottom {
  display: flex !important;
  align-items: flex-end !important;
}

// HACK: This needs to be standardized within UICard, currently the text is
// super unreadable on dark backgrounds.
.text-on-dark {
  color: #C5D3DB;
}

.bold {
  font-weight: bold !important;
}

.cursor-pointer {
  cursor: pointer !important;
}

.full-height {
  height: 100%;
}

.text-constrained {
  max-width: 500px;
  display: block;
}

.text-white {
  color: #FFF !important;
}

.text-darkest {
  color: $text-primary !important;
}

.strong {
  font-weight: bold;
  color: $text-primary;
}

.with-shadow {
  box-shadow: 0px 3px 20px rgba(33, 38, 45, 0.06), -1px 1px 10px rgba(0, 0, 0, 0.02)
}

.overflow-hidden {
  overflow: hidden !important;
}

// Note: Any utility class above this line is being deprecated in favor
// or components within /UILibrary in the future.
// ---------------------------------------------------------------------------
.text-center {
  text-align: center !important;
}

.center-block {
  margin-right: auto !important;
  margin-left: auto !important;
}

@for $i from 0 through 10 {
  $value: $i * 10;

  .pull-up-#{$i} {
    z-index: 100;
    transform: translateY(-$value + px);
  }

  .pull-down-#{$i} {
    z-index: 100;
    transform: translateY($value + px);
  }

  .pull-up-offset-#{$i} {
    margin-bottom: -$value + px;
  }

  .pull-down-offset-#{$i} {
    margin-up: -$value + px;
  }
}

@for $i from 0 through 10 {
  $value: $i * 5;

  @media screen and (max-width: 768px) {
    .pull-up-#{$i} {
      z-index: 100;
      transform: translateY(-$value + px);
    }

    .pull-down-#{$i} {
      z-index: 100;
      transform: translateY($value + px);
    }

    .pull-up-offset-#{$i} {
      margin-bottom: -$value + px;
    }

    .pull-down-offset-#{$i} {
      margin-up: -$value + px;
    }

    .pull-up-sm-#{$i} {
      transform: translateY(-$value + px) !important;
    }

    .pull-down-sm-#{$i} {
      transform: translateY(-$value + px) !important;
    }
  }
}



// Generates consistent z-index utility classes
@for $i from 0 through 10 {
  $value: $i * 10;

  .index-#{$i} {
    z-index: $value;
  }
}

.position-relative {
  position: relative !important;
}

// Generates consistent utility classes for declaritively
// adding margin and padding to existing component styles
@for $i from 0 through 35 {
  $value-interval: 10;
  $value: $i * $value-interval + px;

  @media screen and (min-width: 769px) {
    .m-top-#{$i} {
      margin-top: $value;
    }
    .m-right-#{$i} {
      margin-right: $value;
    }
    .m-bottom-#{$i} {
      margin-bottom: $value;
    }
    .m-left-#{$i} {
      margin-left: $value;
    }
    .m-x-#{$i} {
      margin-right: $value;
      margin-left: $value;
    }
    .m-y-#{$i} {
      margin-top: $value;
      margin-bottom: $value;
    }
    .m-all-#{$i} {
      margin: $value;
    }

    .p-top-#{$i} {
      padding-top: $value;
    }
    .p-right-#{$i} {
      padding-right: $value;
    }
    .p-bottom-#{$i} {
      padding-bottom: $value;
    }
    .p-left-#{$i} {
      padding-left: $value;
    }
    .p-x-#{$i} {
      padding-right: $value;
      padding-left: $value;
    }
    .p-y-#{$i} {
      padding-top: $value;
      padding-bottom: $value;
    }
    .p-all-#{$i} {
      padding: $value;
    }
  }
}

.m-x-auto {
  margin-left: auto;
  margin-right: auto;
}


@for $i from 0 through 35 {
  $value-interval: 5;
  $value: $i * $value-interval + px;

  @media screen and (max-width: 768px) {
    // HACK: The "sm" classes allow me to override margin and padding on
    // smaller screens. While existing margins shrink to accomodate a smaller
    // screen size.

    .m-top-#{$i} {
      margin-top: $value;
    }
    .m-right-#{$i} {
      margin-right: $value;
    }
    .m-bottom-#{$i} {
      margin-bottom: $value;
    }
    .m-left-#{$i} {
      margin-left: $value;
    }
    .m-x-#{$i} {
      margin-right: $value;
      margin-left: $value;
    }
    .m-y-#{$i} {
      margin-top: $value;
      margin-bottom: $value;
    }
    .m-all-#{$i} {
      margin: $value;
    }

    .m-sm-top-#{$i} {
      margin-top: $value !important;
    }
    .m-sm-right-#{$i} {
      margin-right: $value !important;
    }
    .m-sm-bottom-#{$i} {
      margin-bottom: $value !important;
    }
    .m-sm-left-#{$i} {
      margin-left: $value !important;
    }
    .m-sm-x-#{$i} {
      margin-right: $value !important;
      margin-left: $value !important;
    }
    .m-sm-y-#{$i} {
      margin-top: $value !important;
      margin-bottom: $value !important;
    }
    .m-sm-all-#{$i} {
      margin: $value !important;
    }

    .p-top-#{$i} {
      padding-top: $value;
    }
    .p-right-#{$i} {
      padding-right: $value;
    }
    .p-bottom-#{$i} {
      padding-bottom: $value;
    }
    .p-left-#{$i} {
      padding-left: $value;
    }
    .p-x-#{$i} {
      padding-right: $value;
      padding-left: $value;
    }
    .p-y-#{$i} {
      padding-top: $value;
      padding-bottom: $value;
    }
    .p-all-#{$i} {
      padding: $value;
    }

    .p-sm-top-#{$i} {
      padding-top: $value !important;
    }
    .p-sm-right-#{$i} {
      padding-right: $value !important;
    }
    .p-sm-bottom-#{$i} {
      padding-bottom: $value !important;
    }
    .p-sm-left-#{$i} {
      padding-left: $value !important;
    }
    .p-sm-x-#{$i} {
      padding-right: $value !important;
      padding-left: $value !important;
    }
    .p-sm-y-#{$i} {
      padding-top: $value !important;
      padding-bottom: $value !important;
    }
    .p-sm-all-#{$i} {
      padding: $value !important;
    }
  }
}

.p-top-of-page {
  padding-top: 100px;
}
